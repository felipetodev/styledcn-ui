{
  "name": "button",
  "files": [
    {
      "name": "button.tsx",
      "content": "\"use client\"\nimport * as React from \"react\"\nimport styled from \"styled-components\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"styledcn/button\",\n  {\n    variants: {\n      variant: {\n        default: \"primary\",\n        secondary: \"secondary\",\n        destructive: \"destructive\",\n      },\n      size: {\n        small: \"small\",\n        default: \"medium\",\n      },\n    },\n    compoundVariants: [\n      { variant: \"default\", size: \"default\", className: \"button-default--default\" },\n      { variant: \"secondary\", size: \"default\", className: \"button-secondary--default\" },\n      { variant: \"destructive\", size: \"default\", className: \"button-destructive--default\" },\n      { variant: \"default\", size: \"small\", className: \"button-default--small\" },\n      { variant: \"secondary\", size: \"small\", className: \"button-secondary--small\" },\n      { variant: \"destructive\", size: \"small\", className: \"button-destructive--small\" },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n  VariantProps<typeof buttonVariants> { }\n\nconst StyledButton = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  font-family: inherit;\n  cursor: pointer;\n  outline: none;\n  border: none;\n  white-space: nowrap;\n  font-weight: 500;\n  font-size: 14px;\n\n  &:focus-visible {\n    outline: none;\n  }\n  &:disabled {\n    pointer-events: none;\n  }\n  transition: background-color 0.2s;\n  border-radius: var(--radius);\n  padding: 0.5rem 1rem;\n  height: 2.5rem;\n\n  &.small {\n    padding: 0.25rem 0.5rem;\n    height: 2rem;\n  }\n`\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, ...props }, ref) => {\n    return (\n      <StyledButton\n        type=\"button\"\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, StyledButton, buttonVariants }\n"
    }
  ],
  "type": "components:ui"
}